# lower priority on top, higher priority expression on bottom

# make a glossary for grammar rule syntax (expr, (), ? == optional, * == 0 or more, + == 1 or more, | == or)

statements      : newline* statement (newline+ statement)* newline*

statement       : keyword:return expr?
                : keyword:continue
                : keyword:break
                : expr

expr            : keyword:var identifier eq expr
                : comp-expr ((keyword:and|keyword:or) comp-expr)*

comp-expr       : not comp-expr
                : arith-expr ((ee|lt|gt|lte|gte) arith-expr)*

arith-expr      : term ((plus|minus) term)*

term            : factor ((mul|div) factor)*

factor          : (plus|minus) factor
                : power

power           : call (pow factor)*

call            : atom (lparen (expr (comma expr)*)? rparen)?

atom            : int|float|string|identifier
                : lparen expr rparen
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def

list-expr       : lsqaure (expr (comma expr)*)? rsquare

if-expr         : keyword:if expr keyword:then
                  (expr if-expr-b|if-expr-c?)
                | (newline statements keyword:end|if-expr-b|if-expr-c)

if-expr-b       : keyword:elif expr keyword:then
                  (expr if-expr-b|if-expr-c?)
                | (newline statements keyword:end|if-expr-b|if-expr-c)

if-expr-c       : keyword:else
                  expr
                | (newline statements keyword:end)

for-expr        : keyword:for identifier eq expr keyword:to expr
                 (keyword: step expr)? keyword:then 
                 expr
                | (newline statements keyword:end)

while-expr      : keyword:while expr keyword:then
                 expr
                | (newline statements keyword:end)

func-def        : keyword:fun identifier?
                  lparen (identifier (comma identifier)*)? rparen
                  (arrow expr)
                | (newline statements keyword:end)